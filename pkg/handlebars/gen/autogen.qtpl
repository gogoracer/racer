
{%
import (
    "github.com/iancoleman/strcase"
    "strings"
) %}

{% code
func snake(s string) string {
	return strcase.ToSnake(s)
}

func camel(s string) string {
	return strcase.ToLowerCamel(s)
}

func pascal(s string) string {
	return strcase.ToCamel(s)
}

func upper(s string) string {
    return strings.ToUpper(s)
}

func lower(s string) string {
    return strings.ToLower(s)
}

%}

{%- func GenerateElement(e *Element) -%}
{% code


tagPascal := pascal(e.Tag)
elementName := "Element" + tagPascal
// attributesName := tagPascal + "Attributes"
// eventHandlersName := tagPascal + "EventHandlers"
%}
/* cSpell:disable */

package  handlebars

import "github.com/gogoracer/racer/pkg/engine"

type {%s elementName %} struct {
    shouldBeComponent bool
    attrs map[string]interface{}
    children []any
}

func {%s upper(tagPascal) %}(children ...any) *{%s elementName %} {
    return &{%s elementName %}{
        attrs: map[string]interface{}{},
        children: children,
    }
}

func (e *{%s elementName %}) Add(children ...any) *{%s elementName %} {
    e.children = append(e.children, children...)
    return e
}

func (e *{%s elementName %}) Custom(k,v string) *{%s elementName %} {
    e.attrs[k] = v
    return e
}

func (e *{%s elementName %}) BindCustom(k string, v bool) *{%s elementName %} {
    e.shouldBeComponent = true
    return e
}

func (e {%s elementName %}) HandlebarElement() {}

func(e {%s elementName %}) GenerateVDOM() interface{} {
    all := append([]any{ e.attrs }, e.children...)
    if e.shouldBeComponent {
        return engine.NewComponent("{%s e.Tag %}", all... )
    }else {
        return engine.NewTag("{%s e.Tag %}", all ...)
    }
}

{% for _, a := range e.Attributes %}
{%- code attrPascal := pascal(a.Name) -%}
// {%s attrPascal %} is the "{%s a.Name %}"" attribute.
// {%s a.Description %}
// Valid values are constrained to the following:
{%- for _, v := range a.ValidValueTypes -%}
//   * {%s v %}
{%- endfor -%}
func (e *{%s elementName %}) {%s attrPascal %}(v string) (*{%s elementName %}) {
    if v == "" {
        return e
    }
    e.attrs["{%s a.Name %}"] = v
    return e
}
{%- endfor -%}

{% for _, eh := range e.EventHandlers %}
{%- code evt := "On" + pascal(eh.Name[2:]) -%}
// {%s eh.Description %}
func (e *{%s elementName %}) {%s evt %}(fn engine.EventHandler) (*{%s elementName %}) {
    if fn == nil {
        return e
    }

    e.shouldBeComponent = true
    e.children = append(
        e.children,
        engine.On("{%s eh.Name[2:] %}", fn),
    )
    return e
}
{%- endfor -%}

{%- endfunc -%}

{%- func GenerateIcon(details iconCollectionDetailsInfo) -%}
/* cSpell:disable */
package iconify

import "github.com/gogoracer/racer/pkg/handlebars"
var (
{%- for name, icon := range details.Icons -%}
 {%s pascal(details.Prefix) %}{%s pascal(name) %} = handlebars.DIV(`{%s= icon.SvgBody %}`)
{%- endfor -%}
)
{%- endfunc -%}