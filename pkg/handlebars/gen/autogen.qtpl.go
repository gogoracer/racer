// Code generated by qtc from "autogen.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line autogen.qtpl:3
package gen

//line autogen.qtpl:3
import (
	"github.com/iancoleman/strcase"
	"strings"
)

//line autogen.qtpl:8
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line autogen.qtpl:8
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line autogen.qtpl:9
func snake(s string) string {
	return strcase.ToSnake(s)
}

func camel(s string) string {
	return strcase.ToLowerCamel(s)
}

func pascal(s string) string {
	return strcase.ToCamel(s)
}

func upper(s string) string {
	return strings.ToUpper(s)
}

func lower(s string) string {
	return strings.ToLower(s)
}

//line autogen.qtpl:31
func StreamGenerateElement(qw422016 *qt422016.Writer, e *Element) {
//line autogen.qtpl:35
	tagPascal := pascal(e.Tag)
	elementName := "Element" + tagPascal
	// attributesName := tagPascal + "Attributes"
	// eventHandlersName := tagPascal + "EventHandlers"

//line autogen.qtpl:39
	qw422016.N().S(`
/* cSpell:disable */

package  handlebars

import "github.com/gogoracer/racer/pkg/engine"

type `)
//line autogen.qtpl:46
	qw422016.E().S(elementName)
//line autogen.qtpl:46
	qw422016.N().S(` struct {
    shouldBeComponent bool
    attrs map[string]interface{}
    children []any
}

func `)
//line autogen.qtpl:52
	qw422016.E().S(upper(tagPascal))
//line autogen.qtpl:52
	qw422016.N().S(`(children ...any) *`)
//line autogen.qtpl:52
	qw422016.E().S(elementName)
//line autogen.qtpl:52
	qw422016.N().S(` {
    return &`)
//line autogen.qtpl:53
	qw422016.E().S(elementName)
//line autogen.qtpl:53
	qw422016.N().S(`{
        attrs: map[string]interface{}{},
        children: children,
    }
}

func (e *`)
//line autogen.qtpl:59
	qw422016.E().S(elementName)
//line autogen.qtpl:59
	qw422016.N().S(`) Add(children ...any) *`)
//line autogen.qtpl:59
	qw422016.E().S(elementName)
//line autogen.qtpl:59
	qw422016.N().S(` {
    e.children = append(e.children, children...)
    return e
}

func (e *`)
//line autogen.qtpl:64
	qw422016.E().S(elementName)
//line autogen.qtpl:64
	qw422016.N().S(`) Custom(k,v string) *`)
//line autogen.qtpl:64
	qw422016.E().S(elementName)
//line autogen.qtpl:64
	qw422016.N().S(` {
    e.attrs[k] = v
    return e
}

func (e *`)
//line autogen.qtpl:69
	qw422016.E().S(elementName)
//line autogen.qtpl:69
	qw422016.N().S(`) BindCustom(k string, v bool) *`)
//line autogen.qtpl:69
	qw422016.E().S(elementName)
//line autogen.qtpl:69
	qw422016.N().S(` {
    e.shouldBeComponent = true
    return e
}

func (e `)
//line autogen.qtpl:74
	qw422016.E().S(elementName)
//line autogen.qtpl:74
	qw422016.N().S(`) HandlebarElement() {}

func(e `)
//line autogen.qtpl:76
	qw422016.E().S(elementName)
//line autogen.qtpl:76
	qw422016.N().S(`) GenerateVDOM() interface{} {
    all := append([]any{ e.attrs }, e.children...)
    if e.shouldBeComponent {
        return engine.NewComponent("`)
//line autogen.qtpl:79
	qw422016.E().S(e.Tag)
//line autogen.qtpl:79
	qw422016.N().S(`", all... )
    }else {
        return engine.NewTag("`)
//line autogen.qtpl:81
	qw422016.E().S(e.Tag)
//line autogen.qtpl:81
	qw422016.N().S(`", all ...)
    }
}

`)
//line autogen.qtpl:85
	for _, a := range e.Attributes {
//line autogen.qtpl:85
		qw422016.N().S(`
`)
//line autogen.qtpl:86
		attrPascal := pascal(a.Name)

//line autogen.qtpl:86
		qw422016.N().S(`// `)
//line autogen.qtpl:87
		qw422016.E().S(attrPascal)
//line autogen.qtpl:87
		qw422016.N().S(` is the "`)
//line autogen.qtpl:87
		qw422016.E().S(a.Name)
//line autogen.qtpl:87
		qw422016.N().S(`"" attribute.
// `)
//line autogen.qtpl:88
		qw422016.E().S(a.Description)
//line autogen.qtpl:88
		qw422016.N().S(`
// Valid values are constrained to the following:
`)
//line autogen.qtpl:90
		for _, v := range a.ValidValueTypes {
//line autogen.qtpl:90
			qw422016.N().S(`//   * `)
//line autogen.qtpl:91
			qw422016.E().S(v)
//line autogen.qtpl:91
			qw422016.N().S(`
`)
//line autogen.qtpl:92
		}
//line autogen.qtpl:92
		qw422016.N().S(`func (e *`)
//line autogen.qtpl:93
		qw422016.E().S(elementName)
//line autogen.qtpl:93
		qw422016.N().S(`) `)
//line autogen.qtpl:93
		qw422016.E().S(attrPascal)
//line autogen.qtpl:93
		qw422016.N().S(`(v string) (*`)
//line autogen.qtpl:93
		qw422016.E().S(elementName)
//line autogen.qtpl:93
		qw422016.N().S(`) {
    if v == "" {
        return e
    }
    e.attrs["`)
//line autogen.qtpl:97
		qw422016.E().S(a.Name)
//line autogen.qtpl:97
		qw422016.N().S(`"] = v
    return e
}
`)
//line autogen.qtpl:100
	}
//line autogen.qtpl:100
	qw422016.N().S(`
`)
//line autogen.qtpl:102
	for _, eh := range e.EventHandlers {
//line autogen.qtpl:102
		qw422016.N().S(`
`)
//line autogen.qtpl:103
		evt := "On" + pascal(eh.Name[2:])

//line autogen.qtpl:103
		qw422016.N().S(`// `)
//line autogen.qtpl:104
		qw422016.E().S(eh.Description)
//line autogen.qtpl:104
		qw422016.N().S(`
func (e *`)
//line autogen.qtpl:105
		qw422016.E().S(elementName)
//line autogen.qtpl:105
		qw422016.N().S(`) `)
//line autogen.qtpl:105
		qw422016.E().S(evt)
//line autogen.qtpl:105
		qw422016.N().S(`(fn engine.EventHandler) (*`)
//line autogen.qtpl:105
		qw422016.E().S(elementName)
//line autogen.qtpl:105
		qw422016.N().S(`) {
    if fn == nil {
        return e
    }

    e.shouldBeComponent = true
    e.children = append(
        e.children,
        engine.On("`)
//line autogen.qtpl:113
		qw422016.E().S(eh.Name[2:])
//line autogen.qtpl:113
		qw422016.N().S(`", fn),
    )
    return e
}
`)
//line autogen.qtpl:117
	}
//line autogen.qtpl:117
	qw422016.N().S(`
`)
//line autogen.qtpl:119
}

//line autogen.qtpl:119
func WriteGenerateElement(qq422016 qtio422016.Writer, e *Element) {
//line autogen.qtpl:119
	qw422016 := qt422016.AcquireWriter(qq422016)
//line autogen.qtpl:119
	StreamGenerateElement(qw422016, e)
//line autogen.qtpl:119
	qt422016.ReleaseWriter(qw422016)
//line autogen.qtpl:119
}

//line autogen.qtpl:119
func GenerateElement(e *Element) string {
//line autogen.qtpl:119
	qb422016 := qt422016.AcquireByteBuffer()
//line autogen.qtpl:119
	WriteGenerateElement(qb422016, e)
//line autogen.qtpl:119
	qs422016 := string(qb422016.B)
//line autogen.qtpl:119
	qt422016.ReleaseByteBuffer(qb422016)
//line autogen.qtpl:119
	return qs422016
//line autogen.qtpl:119
}

//line autogen.qtpl:121
func StreamGenerateIcon(qw422016 *qt422016.Writer, details iconCollectionDetailsInfo) {
//line autogen.qtpl:121
	qw422016.N().S(`/* cSpell:disable */
package iconify

import "github.com/gogoracer/racer/pkg/handlebars"
var (
`)
//line autogen.qtpl:127
	for name, icon := range details.Icons {
//line autogen.qtpl:127
		qw422016.N().S(` `)
//line autogen.qtpl:128
		qw422016.E().S(pascal(details.Prefix))
//line autogen.qtpl:128
		qw422016.E().S(pascal(name))
//line autogen.qtpl:128
		qw422016.N().S(` = handlebars.DIV(`)
//line autogen.qtpl:128
		qw422016.N().S("`")
//line autogen.qtpl:128
		qw422016.N().S(icon.SvgBody)
//line autogen.qtpl:128
		qw422016.N().S(``)
//line autogen.qtpl:128
		qw422016.N().S("`")
//line autogen.qtpl:128
		qw422016.N().S(`)
`)
//line autogen.qtpl:129
	}
//line autogen.qtpl:129
	qw422016.N().S(`)
`)
//line autogen.qtpl:131
}

//line autogen.qtpl:131
func WriteGenerateIcon(qq422016 qtio422016.Writer, details iconCollectionDetailsInfo) {
//line autogen.qtpl:131
	qw422016 := qt422016.AcquireWriter(qq422016)
//line autogen.qtpl:131
	StreamGenerateIcon(qw422016, details)
//line autogen.qtpl:131
	qt422016.ReleaseWriter(qw422016)
//line autogen.qtpl:131
}

//line autogen.qtpl:131
func GenerateIcon(details iconCollectionDetailsInfo) string {
//line autogen.qtpl:131
	qb422016 := qt422016.AcquireByteBuffer()
//line autogen.qtpl:131
	WriteGenerateIcon(qb422016, details)
//line autogen.qtpl:131
	qs422016 := string(qb422016.B)
//line autogen.qtpl:131
	qt422016.ReleaseByteBuffer(qb422016)
//line autogen.qtpl:131
	return qs422016
//line autogen.qtpl:131
}
