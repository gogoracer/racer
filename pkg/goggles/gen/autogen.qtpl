
{%
import (
    "github.com/iancoleman/strcase"
    "strings"
) %}

{% code
func snake(s string) string {
	return strcase.ToSnake(s)
}

func camel(s string) string {
	return strcase.ToLowerCamel(s)
}

func pascal(s string) string {
	return strcase.ToCamel(s)
}

func upper(s string) string {
    return strings.ToUpper(s)
}

func lower(s string) string {
    return strings.ToLower(s)
}

%}

{%- func GenerateElement(e *Element) -%}
{% code


tagPascal := pascal(e.Tag)
elementName := "Element" + tagPascal
// attributesName := tagPascal + "Attributes"
// eventHandlersName := tagPascal + "EventHandlers"
%}
/* cSpell:disable */

package  goggles

import (
    "github.com/gogoracer/racer/pkg/engine"
)

type {%s elementName %} struct {
    *baseElement
}

func {%s upper(tagPascal) %}(children ...any) *{%s elementName %} {
    return &{%s elementName %}{
        baseElement: newBaseElement("{%s e.Tag %}", children...),
    }
}

func (e *{%s elementName %}) Add(children ...any) *{%s elementName %} {
	e.baseElement.add(children...)
	return e
}

func (e *{%s elementName %}) Custom(k, v string, dontEscape ...bool) *{%s elementName %} {
	e.baseElement.custom(k, v, dontEscape...)
	return e
}

func (e *{%s elementName %}) BindCustom(k string, v string,  dontEscape ...bool) *{%s elementName %} {
    e.baseElement.bindCustom(k, v, dontEscape...)
	return e
}

func (e *{%s elementName %}) appendAttribute(k string, v string, dontEscape ...bool) *{%s elementName %} {
	e.baseElement.appendAttribute(k, v, dontEscape...)
	return e
}


func (e *{%s elementName %}) GenerateVDOM() interface{} {
	return e.baseElement.generateVDOM()
}

{% for _, a := range e.Attributes %}
{%- code attrPascal := pascal(a.Name) -%}
// {%s attrPascal %} is the "{%s a.Name %}" attribute.
// {%s strings.ReplaceAll(a.Description,"\n","  ") %}
// Valid values are constrained to the following:
{%- for _, v := range a.ValidValueTypes -%}
//   * {%s v %}
{%- endfor -%}
func (element *{%s elementName %}) {%s attrPascal %}(v string, dontEscape ...bool) *{%s elementName %} {
    element.appendAttribute("{%s a.Name %}", v, dontEscape...)
    return element
}
{%- endfor -%}

{% for _, eh := range e.EventHandlers %}
{%- code evt := "On" + pascal(eh.Name[2:]) -%}
// {%s eh.Description %}
func (e *{%s elementName %}) {%s evt %}(fn engine.EventHandler) (*{%s elementName %}) {
    if fn == nil {
        return e
    }

    e.shouldBeComponent = true
    e.children = append(
        e.children,
        engine.On("{%s eh.Name[2:] %}", fn),
    )
    return e
}
{%- endfor -%}

{%- endfunc -%}

{%- func GenerateIcon(pkg iconPackage) -%}
/* cSpell:disable */
package {%s pkg.Name %}

import "github.com/gogoracer/racer/pkg/goggles"

{%- for _, namedIcon := range pkg.Icons -%}
func {%s namedIcon.Name %}() *goggles.ElementSVG {
    return goggles.SVG(`{%s= namedIcon.Icon.SvgBody %}`).
        Custom("viewBox","0,0,{%d pkg.Width %},{%d pkg.Height %}").
        Custom("width","1em").
        Custom("height","1em")
}
{% endfor %}

{%- endfunc -%}