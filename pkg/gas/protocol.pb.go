// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: protocol.proto

package gas

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DiffType int32

const (
	DiffType_DIFF_TYPE_UNKNOWN DiffType = 0
	DiffType_CREATE            DiffType = 1
	DiffType_UPDATE            DiffType = 2
	DiffType_DELETE            DiffType = 3
)

// Enum value maps for DiffType.
var (
	DiffType_name = map[int32]string{
		0: "DIFF_TYPE_UNKNOWN",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
	}
	DiffType_value = map[string]int32{
		"DIFF_TYPE_UNKNOWN": 0,
		"CREATE":            1,
		"UPDATE":            2,
		"DELETE":            3,
	}
)

func (x DiffType) Enum() *DiffType {
	p := new(DiffType)
	*p = x
	return p
}

func (x DiffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiffType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[0].Descriptor()
}

func (DiffType) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[0]
}

func (x DiffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiffType.Descriptor instead.
func (DiffType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

type ContentType int32

const (
	ContentType_CONTENT_TYPE_UNKNOWN ContentType = 0
	ContentType_TEXT                 ContentType = 1
	ContentType_HTML                 ContentType = 2
	ContentType_ATTRIBUTE            ContentType = 3
	ContentType_EMPTY_FROM_REMOVAL   ContentType = 4
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_UNKNOWN",
		1: "TEXT",
		2: "HTML",
		3: "ATTRIBUTE",
		4: "EMPTY_FROM_REMOVAL",
	}
	ContentType_value = map[string]int32{
		"CONTENT_TYPE_UNKNOWN": 0,
		"TEXT":                 1,
		"HTML":                 2,
		"ATTRIBUTE":            3,
		"EMPTY_FROM_REMOVAL":   4,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[1].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[1]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

type FromClient_Type int32

const (
	FromClient_TYPE_UNKNOWN FromClient_Type = 0
	FromClient_LOG          FromClient_Type = 1
	FromClient_EVENT        FromClient_Type = 2
)

// Enum value maps for FromClient_Type.
var (
	FromClient_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "LOG",
		2: "EVENT",
	}
	FromClient_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"LOG":          1,
		"EVENT":        2,
	}
)

func (x FromClient_Type) Enum() *FromClient_Type {
	p := new(FromClient_Type)
	*p = x
	return p
}

func (x FromClient_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FromClient_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[2].Descriptor()
}

func (FromClient_Type) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[2]
}

func (x FromClient_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FromClient_Type.Descriptor instead.
func (FromClient_Type) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4, 0}
}

type Diff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// option (vtproto.mempool) = true;
	//
	// Types that are assignable to Root:
	//
	//	*Diff_Document
	//	*Diff_ElementSelector
	Root isDiff_Root `protobuf_oneof:"root"`
	// Position of each child
	PathIndicies []uint32    `protobuf:"varint,3,rep,packed,name=path_indicies,json=pathIndicies,proto3" json:"path_indicies,omitempty"`
	DiffType     DiffType    `protobuf:"varint,4,opt,name=diff_type,json=diffType,proto3,enum=DiffType" json:"diff_type,omitempty"`
	ContentType  ContentType `protobuf:"varint,5,opt,name=content_type,json=contentType,proto3,enum=ContentType" json:"content_type,omitempty"`
	Contents     string      `protobuf:"bytes,6,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Diff) Reset() {
	*x = Diff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diff) ProtoMessage() {}

func (x *Diff) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diff.ProtoReflect.Descriptor instead.
func (*Diff) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

func (m *Diff) GetRoot() isDiff_Root {
	if m != nil {
		return m.Root
	}
	return nil
}

func (x *Diff) GetDocument() bool {
	if x, ok := x.GetRoot().(*Diff_Document); ok {
		return x.Document
	}
	return false
}

func (x *Diff) GetElementSelector() string {
	if x, ok := x.GetRoot().(*Diff_ElementSelector); ok {
		return x.ElementSelector
	}
	return ""
}

func (x *Diff) GetPathIndicies() []uint32 {
	if x != nil {
		return x.PathIndicies
	}
	return nil
}

func (x *Diff) GetDiffType() DiffType {
	if x != nil {
		return x.DiffType
	}
	return DiffType_DIFF_TYPE_UNKNOWN
}

func (x *Diff) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_CONTENT_TYPE_UNKNOWN
}

func (x *Diff) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type isDiff_Root interface {
	isDiff_Root()
}

type Diff_Document struct {
	Document bool `protobuf:"varint,1,opt,name=document,proto3,oneof"`
}

type Diff_ElementSelector struct {
	ElementSelector string `protobuf:"bytes,2,opt,name=element_selector,json=elementSelector,proto3,oneof"`
}

func (*Diff_Document) isDiff_Root() {}

func (*Diff_ElementSelector) isDiff_Root() {}

type Diffs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Diff `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Diffs) Reset() {
	*x = Diffs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diffs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diffs) ProtoMessage() {}

func (x *Diffs) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diffs.ProtoReflect.Descriptor instead.
func (*Diffs) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *Diffs) GetValues() []*Diff {
	if x != nil {
		return x.Values
	}
	return nil
}

type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *SessionInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ToClient_Diffs
	//	*ToClient_SessionInfo
	Message isToClient_Message `protobuf_oneof:"message"`
}

func (x *ToClient) Reset() {
	*x = ToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToClient) ProtoMessage() {}

func (x *ToClient) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToClient.ProtoReflect.Descriptor instead.
func (*ToClient) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

func (m *ToClient) GetMessage() isToClient_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ToClient) GetDiffs() *Diffs {
	if x, ok := x.GetMessage().(*ToClient_Diffs); ok {
		return x.Diffs
	}
	return nil
}

func (x *ToClient) GetSessionInfo() *SessionInfo {
	if x, ok := x.GetMessage().(*ToClient_SessionInfo); ok {
		return x.SessionInfo
	}
	return nil
}

type isToClient_Message interface {
	isToClient_Message()
}

type ToClient_Diffs struct {
	Diffs *Diffs `protobuf:"bytes,1,opt,name=diffs,proto3,oneof"`
}

type ToClient_SessionInfo struct {
	SessionInfo *SessionInfo `protobuf:"bytes,2,opt,name=session_info,json=sessionInfo,proto3,oneof"`
}

func (*ToClient_Diffs) isToClient_Message() {}

func (*ToClient_SessionInfo) isToClient_Message() {}

type FromClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       FromClient_Type   `protobuf:"varint,1,opt,name=type,proto3,enum=FromClient_Type" json:"type,omitempty"`
	Ids        []string          `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	Selected   bool              `protobuf:"varint,3,opt,name=selected,proto3" json:"selected,omitempty"`
	ValueMulti []string          `protobuf:"bytes,4,rep,name=value_multi,json=valueMulti,proto3" json:"value_multi,omitempty"`
	Data       map[string]string `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extra      map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	File       *FromClient_File  `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *FromClient) Reset() {
	*x = FromClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromClient) ProtoMessage() {}

func (x *FromClient) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromClient.ProtoReflect.Descriptor instead.
func (*FromClient) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *FromClient) GetType() FromClient_Type {
	if x != nil {
		return x.Type
	}
	return FromClient_TYPE_UNKNOWN
}

func (x *FromClient) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FromClient) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

func (x *FromClient) GetValueMulti() []string {
	if x != nil {
		return x.ValueMulti
	}
	return nil
}

func (x *FromClient) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FromClient) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *FromClient) GetFile() *FromClient_File {
	if x != nil {
		return x.File
	}
	return nil
}

type FromClient_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SizeBytes       int64  `protobuf:"varint,2,opt,name=SizeBytes,proto3" json:"SizeBytes,omitempty"`
	MimeType        string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Data            []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	TotalFilesIndex uint32 `protobuf:"varint,5,opt,name=total_files_index,json=totalFilesIndex,proto3" json:"total_files_index,omitempty"`
	TotalFileCount  uint32 `protobuf:"varint,6,opt,name=total_file_count,json=totalFileCount,proto3" json:"total_file_count,omitempty"`
}

func (x *FromClient_File) Reset() {
	*x = FromClient_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromClient_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromClient_File) ProtoMessage() {}

func (x *FromClient_File) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromClient_File.ProtoReflect.Descriptor instead.
func (*FromClient_File) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4, 0}
}

func (x *FromClient_File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FromClient_File) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *FromClient_File) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FromClient_File) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FromClient_File) GetTotalFilesIndex() uint32 {
	if x != nil {
		return x.TotalFilesIndex
	}
	return 0
}

func (x *FromClient_File) GetTotalFileCount() uint32 {
	if x != nil {
		return x.TotalFileCount
	}
	return 0
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf3, 0x01, 0x0a, 0x04, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1c, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x74,
	0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x44,
	0x69, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x69, 0x66, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x26, 0x0a, 0x05, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12,
	0x1d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x1d,
	0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68, 0x0a,
	0x08, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x64, 0x69, 0x66,
	0x66, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x48, 0x00, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe3, 0x04, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x29, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0xbf, 0x01, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x37, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x45, 0x0a,
	0x08, 0x44, 0x69, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x46,
	0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x2a, 0x62, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x04, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2e, 0x2f, 0x67,
	0x61, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protocol_proto_goTypes = []interface{}{
	(DiffType)(0),           // 0: DiffType
	(ContentType)(0),        // 1: ContentType
	(FromClient_Type)(0),    // 2: FromClient.Type
	(*Diff)(nil),            // 3: Diff
	(*Diffs)(nil),           // 4: Diffs
	(*SessionInfo)(nil),     // 5: SessionInfo
	(*ToClient)(nil),        // 6: ToClient
	(*FromClient)(nil),      // 7: FromClient
	(*FromClient_File)(nil), // 8: FromClient.File
	nil,                     // 9: FromClient.DataEntry
	nil,                     // 10: FromClient.ExtraEntry
}
var file_protocol_proto_depIdxs = []int32{
	0,  // 0: Diff.diff_type:type_name -> DiffType
	1,  // 1: Diff.content_type:type_name -> ContentType
	3,  // 2: Diffs.values:type_name -> Diff
	4,  // 3: ToClient.diffs:type_name -> Diffs
	5,  // 4: ToClient.session_info:type_name -> SessionInfo
	2,  // 5: FromClient.type:type_name -> FromClient.Type
	9,  // 6: FromClient.data:type_name -> FromClient.DataEntry
	10, // 7: FromClient.extra:type_name -> FromClient.ExtraEntry
	8,  // 8: FromClient.file:type_name -> FromClient.File
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diffs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromClient_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Diff_Document)(nil),
		(*Diff_ElementSelector)(nil),
	}
	file_protocol_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ToClient_Diffs)(nil),
		(*ToClient_SessionInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_proto_enumTypes,
		MessageInfos:      file_protocol_proto_msgTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
